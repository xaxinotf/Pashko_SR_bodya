Імпорт необхідних бібліотек:

numpy для математичних операцій і генерації випадкових чисел.
matplotlib для побудови графіків.
tkinter для створення графічного інтерфейсу користувача (GUI).
Функція random_search:

Вхідні параметри:
func — об'єктивна функція для оптимізації.
bounds — межі пошуку для кожної змінної.
num_iterations — кількість ітерацій пошуку.
Алгоритм:
Ініціалізує змінні для збереження найкращого знайденого значення.
У циклі генерує випадкові точки в заданих межах.
Обчислює значення функції в цих точках.
Зберігає точку з максимальним значенням функції.
Функція objective_function:

Обчислює значення заданої функції при заданих x1 і x2.
Функція run_random_search:

Отримує кількість ітерацій від користувача через GUI.
Виконує перевірку введених даних.
Запускає випадковий пошук і відображає результати.
Викликає функцію для побудови графіка результатів.
Функція plot_results:

Створює сітку значень x1 і x2 для побудови контурного графіка функції.
Відображає контурний графік функції.
Позначає найкращу знайдену точку на графіку.
Графічний інтерфейс користувача (GUI):

Створений за допомогою бібліотеки tkinter.
Містить поле для введення кількості ітерацій.
Кнопку для запуску алгоритму.
Поле для відображення результатів.
Інструкції з використання програми:

Запуск програми:

Збережіть код у файлі з розширенням .py, наприклад, random_search.py.
Запустіть файл за допомогою Python 3: python random_search.py.
Введення даних:

У вікні, що відкрилося, введіть бажану кількість ітерацій у поле "Кількість ітерацій". Рекомендується вводити значення більше 1000 для більш точного результату.
Запуск алгоритму:

Натисніть кнопку "Запустити пошук".
Перегляд результатів:

У нижній частині вікна з'явиться найкраща знайдена точка і відповідне максимальне значення функції.
Автоматично відкриється графік, на якому відображена функція та знайдена точка максимуму.